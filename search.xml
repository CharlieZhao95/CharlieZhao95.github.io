<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python GIL与并发编程基础</title>
    <url>/2021/12/26/Python%20GIL%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1>一、Python GIL概述</h1>
<p>在Python中很重要的一个概念就是GIL(全局解释器锁)，<strong>一个阻碍机器码并行执行的全局锁</strong>，这也代表了Python中的多线程实质上都是<strong>伪多线程</strong>，同一时刻实际只有一个线程在执行，即便使用多线程也无法做到真正的并发。</p>
<p>由于GIL的存在，在多核系统中执行CPU密集型任务时也无法利用多核优势，使用<strong>多线程的性能甚至会比单线程更差</strong>一些。这个问题业内通用的做法是使用<strong>多进程编程</strong>，除此之外本文还将介绍Python中协程的使用(某些场景比线程效率更优的任务调度方式)。</p>
<h1>二、并发编程</h1>
<h2 id="2-1-多进程与多线程">2.1 多进程与多线程</h2>
<p>multiprocessing 是官方提供的多进程管理包，通过使用子进程而非线程有效地绕过了全局解释器锁。 因此，multiprocessing 模块允许程序员充分利用给定机器上的多个处理器。</p>
<p>先看一组多线程与多进程执行独立任务时的性能对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @Time    : 2021/12/26 22:43 </span></span><br><span class="line"><span class="comment"># @Author  : CharlieZhao</span></span><br><span class="line"><span class="comment"># @File    : test_multiprocessing.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Note    : This module is used to test performance of multiprocessing</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; To avoid performance deficiency caused by GIL, multiprocessing is a better way to </span></span><br><span class="line"><span class="string">perform concurrent tasks than threading. This module is used to test performance between </span></span><br><span class="line"><span class="string">multiprocessing and threading.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print_number</span>(<span class="params">info</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100_000_000</span>):</span><br><span class="line">        res = res + i</span><br><span class="line">    <span class="built_in">print</span>(info + <span class="string">&quot; task over, result = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_execution_time</span>(<span class="params">start_time, end_time</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The execution time is &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_multiprocessing_task</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    log the execution time of multiprocessing task.</span></span><br><span class="line"><span class="string">    :return: void</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; multiprocessing task start &quot;</span>)</span><br><span class="line">    p1 = Process(target=_print_number, args=(<span class="string">&quot;Process 1&quot;</span>,))</span><br><span class="line">    p2 = Process(target=_print_number, args=(<span class="string">&quot;Process 2&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">    start = time.time()</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time.time()</span><br><span class="line"> </span><br><span class="line">    show_execution_time(start, end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; multiprocessing task end &quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_threading_task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; threading task start &quot;</span>)</span><br><span class="line">    t1 = Thread(target=_print_number, args=(<span class="string">&quot;Thread 1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=_print_number, args=(<span class="string">&quot;Thread 2&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">    start = time.time()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time.time()</span><br><span class="line"> </span><br><span class="line">    show_execution_time(start, end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; threading task end &quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    execute_multiprocessing_task()</span><br><span class="line">    execute_threading_task()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">result:</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> multiprocessing task start </span></span><br><span class="line"><span class="string">Process 2 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">Process 1 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">The execution time is 10.988635778427124 s</span></span><br><span class="line"><span class="string"> multiprocessing task end </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> threading task start </span></span><br><span class="line"><span class="string">Thread 1 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">Thread 2 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">The execution time is 19.204389572143555 s</span></span><br><span class="line"><span class="string"> threading task end </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">可以很直观的看到在执行两个CPU密集型的独立任务时，使用多进程相较于使用多线程效率快了一倍以上。</span></span><br><span class="line"><span class="string">当然，Python多线程也不是一无是处，在执行IO密集型任务时，单单使用多进程就不太适合了。</span></span><br><span class="line"><span class="string">使用多进程+多线程的模式可以绕过阻塞线程，同时相较于单进程+多线程一定程度上减少了CPU线程切换的性能损失。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-协程基础应用">2.2 协程基础应用</h2>
<p>协程是一种用户级的轻量级线程，<strong>协程拥有自己的寄存器上下文和栈</strong>。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。</p>
<p>再对比一下线程和协程：</p>
<p><strong>多线程</strong>：多线程的本质是抢占式多任务调度。不管是进程还是线程，每次阻塞、切换都需要陷入系统调用(system call)，先让CPU跑操作系统的调度程序，然后再由调度程序决定该跑哪一个进程(线程)。</p>
<p><strong>协程</strong>：协程的本质是协作式多任务调度，需要用户自己来编写调度逻辑。<strong>对于CPU来说，协程其实就是单线程，不需要考虑怎么调度、切换上下文</strong>，一定程度避免了CPU调度线程切换的性能损失。</p>
<p>但实际用好协程其实是非常困难的，不管是Debug还是由自己手动维护状态转移、调度逻辑都有很大的挑战，在此给出一个协程的使用样例，后续再继续深入讨论。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @Time    : 2021/12/29 22:41 </span></span><br><span class="line"><span class="comment"># @Author  : CharlieZhao</span></span><br><span class="line"><span class="comment"># @File    : test_asyncio.py </span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;async task example&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_execution_time</span>(<span class="params">start_time, end_time</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The execution time is &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_async_print_number</span>(<span class="params">info</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100_000_000</span>):</span><br><span class="line">        res = res + i</span><br><span class="line">        <span class="comment"># 增加一条线程打印语句观测调用过程</span></span><br><span class="line">        <span class="built_in">print</span>(info, <span class="string">&quot; res=&#123;&#125; in &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res, threading.currentThread()))</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 1s sleep 模拟IO等待,在等待时自动切换任务</span></span><br><span class="line">    <span class="built_in">print</span>(info + <span class="string">&quot; task over, result = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_async_task</span>():</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># 创建两个任务</span></span><br><span class="line">    tasks = [_async_print_number(<span class="string">&quot;async task 1:&quot;</span>), _async_print_number(<span class="string">&quot;async task 2:&quot;</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; async task start &quot;</span>)</span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    show_execution_time(start, end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; async task end &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    execute_async_task()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">result: 可以看到两个任务1s为周期交替执行(实质是一个任务进入IO阻塞后，通过我们的协程调度逻辑，</span></span><br><span class="line"><span class="string">在Event_loop中切换至另一个可用任务),且两个任务都在主线程中执行没有线程的切换。</span></span><br><span class="line"><span class="string">async task start </span></span><br><span class="line"><span class="string">async task 2:  res=0 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=0 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 2:  res=1 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=1 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 2:  res=3 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=3 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 2:  res=6 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=6 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 2:  res=10 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=10 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 2:  res=15 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">async task 1:  res=15 in &lt;_MainThread(MainThread, started 21168)&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-样例代码">2.3 样例代码</h2>
<p>⭐️<a href="https://github.com/CharlieZhao95/code-example/tree/main/Python/ConcurrentProgramming">GitHub: Python GIL与并发编程基础</a>，一键三连！</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>GIL</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Argument-Clinic</title>
    <url>/2022/01/24/Python-Argument-Clinic/</url>
    <content><![CDATA[<h1>Python Argument Clinic功能解析</h1>
<h1>一、Argument Clinic概述</h1>
<p>在阅读cpython源码的过程中，常常能在模块上看到如下的注释语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment">module _pickle</span></span><br><span class="line"><span class="comment">class _pickle.Pickler &quot;PicklerObject *&quot; &quot;&amp;Pickler_Type&quot;</span></span><br><span class="line"><span class="comment">class _pickle.PicklerMemoProxy &quot;PicklerMemoProxyObject *&quot; &quot;&amp;PicklerMemoProxyType&quot;</span></span><br><span class="line"><span class="comment">class _pickle.Unpickler &quot;UnpicklerObject *&quot; &quot;&amp;Unpickler_Type&quot;</span></span><br><span class="line"><span class="comment">class _pickle.UnpicklerMemoProxy &quot;UnpicklerMemoProxyObject *&quot; &quot;&amp;UnpicklerMemoProxyType&quot;</span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br><span class="line"><span class="comment">/*[clinic end generated code: output=da39a3ee5e6b4b0d input=4b3e113468a58e6c]*/</span></span><br></pre></td></tr></table></figure>
<p><code>clinic</code>是什么？<strong>本质是其实就是一个python脚本。</strong></p>
<p><code>clinic</code>有什么功能？<strong>自动生成cpython中参数解析功能的相关代码。</strong></p>
<p><code>clinic</code>是cpython中c文件的预处理器，可以通过固定格式的模板为<code>builtins</code>模块<strong>自动生成参数解析代码</strong>。如果自己维护cpython的参数解析代码，是一项较为繁琐的工作，需要在大量的地方维护冗余信息。当使用<code>Argument Clinic</code>功能时，我们不再需要自己进行参数解析，基于<code>Argument Clinic</code>生成的参数解析代码可以作为一个黑盒使用。</p>
<p>当前cpython中大部分参数解析的函数都使用了<code>Argument Clinic</code>模板自动生成功能，本文主要为所有打算<strong>编写自定义模块</strong>和<strong>维护现有<code>builtins</code></strong> 的同学提供基础指导。</p>
<h1>二、基本语法</h1>
<h2 id="2-1-clinic-input和output">2.1 clinic input和output</h2>
<p>clinic可以扫描文件中的指定行作为关键字，clinic input行之间的所有内容作为Clinic的模板输入，通常被称为<code>Clinic block</code>，也是我们需要重点关注和修改的部分。</p>
<ul>
<li><strong>clinic input start</strong>：<code>/*[clinic input]</code></li>
<li><strong>clinic input end</strong>: <code>[clinic start generated code]*/</code></li>
</ul>
<p>构建python后执行命令行：<code>./python .\Tools\clinic\clinic.py foo.c</code></p>
<p>可以扫描<code>foo.c</code>文件中的所有<code>clinic block</code>并生成代码，并在最后加上<code>/*[clinic end generated code: output=xx input=xx]*/</code>作为<strong>校验行</strong>，用于验证输入输出的对应关系。下面给出一个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* foo.c */</span></span><br><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">... clinic input</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br><span class="line">... clinic output</span><br><span class="line"><span class="comment">/*[clinic end generated code: output=da39a3ee5e6b4b0d input=bb0565424c99751c]*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-创建clinic模板">2.2 创建clinic模板</h2>
<p>本节使用python3.10的<code>_pickle.c</code>模块作为样例，解析clinic的模板格式。</p>
<ol>
<li>
<p>首先需要在类顶部声明模块/类定义，<strong>类似于C语言常常在文件顶部进行声明</strong>。此处应对所有模块与类进行声明，其名称应该与Python界面的名称保持一致，可以使用<code>PyModuleDef</code>和<code>PyTypeObject</code>中定义的名称。</p>
<p>_pickle中模块及类的clinic定义样例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment">module _pickle</span></span><br><span class="line"><span class="comment">class _pickle.Pickler &quot;PicklerObject *&quot; &quot;&amp;Pickler_Type&quot;</span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建函数块的clinic，应该由几部分组成：</p>
<ul>
<li>
<p>模块.类.方法名称(与python保持一致)，<strong>(可选)</strong> 使用<code>-&gt;</code>在method后添加返回值类型；</p>
</li>
<li>
<p>空行后写入参数名称及类型，每个参数都应占独立一行；</p>
</li>
<li>
<p><strong>(可选)</strong> 为参数设置默认值，格式为<code>name_of_parameter: converter = default_value</code>；</p>
<blockquote>
<p>converter是什么?</p>
<p>我们需要了解参数应该被转换成什么类型，通常使用单个字符来表示某个特定类型，例如’O’表示对象，'s’表示字符串，'i’表示int型参数；详细可以参考:<a href="https://docs.python.org/3.11/c-api/arg.html#arg-parsing">arg-parsing</a></p>
</blockquote>
</li>
<li>
<p><strong>(可选)</strong> 新增一行后缩进，为每个参数添加文档说明；</p>
</li>
<li>
<p><strong>(可选)</strong> 若使用<a href="https://www.osgeo.cn/cpython/c-api/arg.html#c.PyArg_ParseTuple"><code>PyArg_ParseTuple()</code></a> 解析参数，则所有参数都是位置相关，在最后加上<code>/</code>标记即可。如果需要使用关键字去解析参数<a href="https://www.osgeo.cn/cpython/c-api/arg.html#c.PyArg_ParseTupleAndKeywords"><code>PyArg_ParseTupleAndKeywords()</code></a> 则不需要加<code>/</code>；</p>
</li>
<li>
<p><strong>(可选)</strong> 空行后，支持写入方法说明文档；</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">_pickle.Pickler.dump</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  obj: &#x27;O&#x27;</span></span><br><span class="line"><span class="comment">      argument document(optional)</span></span><br><span class="line"><span class="comment">  /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Write a pickled representation of the given object to the open file.</span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-3-clinc代码生成">2.3 clinc代码生成</h2>
<p>这里给出一个<code>_pickle</code>模块的例子验证代码生成的功能，我们构建python后，执行命令行：</p>
<p><code>./python .\Tools\clinic\clinic.py .\Modules\_pickle.c</code></p>
<p>可以看到<code>clinic</code>其实就是一个生成代码的python脚本。</p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用clinic时的原始pickler_dump函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">Pickler_dump</span><span class="params">(PicklerObject *self, PyObject *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义了一个临时变量用于PyObject类型的参数解析</span></span><br><span class="line">    PyObject *obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check whether the Pickler was initialized correctly (issue3664).</span></span><br><span class="line"><span class="comment">       Developers often forget to call __init__() in their subclasses, which</span></span><br><span class="line"><span class="comment">       would trigger a segfault without this check. */</span></span><br><span class="line">    <span class="keyword">if</span> (self-&gt;write == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        PyErr_Format(PicklingError,</span><br><span class="line">                     <span class="string">&quot;Pickler.__init__() was not called by %s.__init__()&quot;</span>,</span><br><span class="line">                     Py_TYPE(self)-&gt;tp_name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用PyArg_ParseTuple进行参数解析</span></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O:dump&quot;</span>, &amp;obj))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Pickler_ClearBuffer(self) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dump(self, obj) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_Pickler_FlushToFile(self) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Py_RETURN_NONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用clinic处理后发生了几点变化：</p>
<ul>
<li>方法名根据clinic中定义的发生了改变，按模块/类/方法的格式进行定义<code>_pickle_Pickler_dump</code>;</li>
<li>除了固定的self参数，其余参数根据clinic定义自动生成，此处自动生成了<code>PyObject *obj</code>；</li>
<li><strong>参数不再需要传递<code>PyObject *args</code>，再使用<code>PyArg_ParseTuple</code>一个一个解析，解析的过程将自动完成；</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">_pickle.Pickler.dump</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  obj: &#x27;O&#x27;</span></span><br><span class="line"><span class="comment">  /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Write a pickled representation of the given object to the open file.</span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">_pickle_Pickler_dump(PicklerObject *self, PyObject *obj)</span><br><span class="line"><span class="comment">/*[clinic end generated code: output=87ecad1261e02ac7 input=199cc5a0e7561167]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Check whether the Pickler was initialized correctly (issue3664).</span></span><br><span class="line"><span class="comment">       Developers often forget to call __init__() in their subclasses, which</span></span><br><span class="line"><span class="comment">       would trigger a segfault without this check. */</span></span><br><span class="line">    <span class="keyword">if</span> (self-&gt;write == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        PickleState *st = _Pickle_GetGlobalState();</span><br><span class="line">        PyErr_Format(st-&gt;PicklingError,</span><br><span class="line">                     <span class="string">&quot;Pickler.__init__() was not called by %s.__init__()&quot;</span>,</span><br><span class="line">                     Py_TYPE(self)-&gt;tp_name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Pickler_ClearBuffer(self) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dump(self, obj) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Pickler_FlushToFile(self) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Py_RETURN_NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _pickle.h 头文件对应的宏定义也会自动生成以下代码块</span></span><br><span class="line">PyDoc_STRVAR(_pickle_Pickler_dump__doc__,</span><br><span class="line"><span class="string">&quot;dump($self, obj, /)\n&quot;</span></span><br><span class="line"><span class="string">&quot;--\n&quot;</span></span><br><span class="line"><span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;Write a pickled representation of the given object to the open file.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PICKLE_PICKLER_DUMP_METHODDEF    \</span></span><br><span class="line"><span class="meta">    &#123;<span class="meta-string">&quot;dump&quot;</span>, (PyCFunction)_pickle_Pickler_dump, METH_O, _pickle_Pickler_dump__doc__&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接添加到PyMethodDef中即可使用</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">PyMethodDef</span> <span class="title">Pickler_methods</span>[] =</span> &#123;</span><br><span class="line">    _PICKLE_PICKLER_DUMP_METHODDEF</span><br><span class="line">    _PICKLE_PICKLER_CLEAR_MEMO_METHODDEF</span><br><span class="line">    _PICKLE_PICKLER___SIZEOF___METHODDEF</span><br><span class="line">    &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;                <span class="comment">/* sentinel */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们再<strong>添加一个int型参数</strong>来查看变化，可以看到：</p>
<ul>
<li>函数增加了一个int型参数，这和我们预想的一样；</li>
<li>函数名变为<code>_pickle_Pickler_dump_impl</code>，clinic会在函数名后增加<code>_impl</code>后缀；</li>
<li>在<code>_pickle.h</code>文件中新增了<code>_pickle_Pickler_dump</code>，<strong>自动补全了参数解析的代码块</strong>。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*[clinic input]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">_pickle.Pickler.dump</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  obj: object</span></span><br><span class="line"><span class="comment">  num: &#x27;i&#x27;</span></span><br><span class="line"><span class="comment">  /</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Write a pickled representation of the given object to the open file.</span></span><br><span class="line"><span class="comment">[clinic start generated code]*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">_pickle_Pickler_dump_impl(PicklerObject *self, PyObject *obj, <span class="keyword">int</span> num)</span><br><span class="line"><span class="comment">/*[clinic end generated code: output=e80bca9c5c5a35a2 input=c6c713f75bc38e80]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    ...code block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* _pickle.h文件，参数解析方式自动选择了METH_FASTCALL，对应_pickle_Pickler_dump(PicklerObject *self, PyObject *const *args, Py_ssize_t nargs)的回调函数参数类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PICKLE_PICKLER_DUMP_METHODDEF    \</span></span><br><span class="line"><span class="meta">    &#123;<span class="meta-string">&quot;dump&quot;</span>, (PyCFunction)(void(*)(void))_pickle_Pickler_dump, METH_FASTCALL, _pickle_Pickler_dump__doc__&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">_pickle_Pickler_dump_impl(PicklerObject *self, PyObject *obj, <span class="keyword">int</span> num);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自动补充了参数解析的功能，我们写的函数逻辑作为底层被调用 */</span></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">_pickle_Pickler_dump(PicklerObject *self, PyObject *<span class="keyword">const</span> *args, Py_ssize_t nargs)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *return_value = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *obj;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_PyArg_CheckPositional(<span class="string">&quot;dump&quot;</span>, nargs, <span class="number">2</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj = args[<span class="number">0</span>];</span><br><span class="line">    num = _PyLong_AsInt(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">-1</span> &amp;&amp; PyErr_Occurred()) &#123;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行业务逻辑，不需要考虑参数解析</span></span><br><span class="line">    return_value = _pickle_Pickler_dump_impl(self, obj, num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">    <span class="keyword">return</span> return_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到使用<code>clinic</code>后不管是多少参数，都可以自动生成参数解析代码块，用<strong>声明式编程取代传统的命令式编程</strong>，使得我们的编码过程更加简单。</p>
<h1>三、参考文章</h1>
<p>除此了基本的功能之外，clinic还提供了强大的高级特性用于通过模板生成各种类型的函数，详细可见如下文档:</p>
<p><a href="https://docs.python.org/3.11/howto/clinic.html">Argument Clinic官方文档</a></p>
<p><a href="https://www.osgeo.cn/cpython/c-api/arg.html#c.PyArg_ParseTuple%5D">参数解析API相关文档</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>CPython</category>
        <category>clinic</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CPython解释器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>pyperf使用指南</title>
    <url>/2022/01/26/pyperf%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1>Python pyperf module</h1>
<h1>一、概述</h1>
<p>在实际编码过程中常常需要对系统的性能进行剖析和优化，有以下工具可以使用：</p>
<p><code>perf</code>是一款linux性能分析工具，它提供了一个性能分析框架，可以用于分析程序运行过程中发生的硬件时间(CPU的时钟周期)/软件时间(进程切换，缺页错误)来定位程序的性能瓶颈。</p>
<p><code>pyperf</code>则是python中用于性能测试、分析的工具包。<strong>本文主要介绍如何快速上手<code>pyperf</code>，对指定代码块或模块进行简单的性能测试。</strong></p>
<h1>二、Quick Start</h1>
<h2 id="2-1-Install">2.1 Install</h2>
<p>执行命令行安装：</p>
<p><code>python3 -m pip install pyperf</code></p>
<p>若提示依赖的版本较低，可以尝试执行<code>setuptools</code>:</p>
<p><code>python3 -m pip install -U setuptools</code></p>
<h2 id="2-2-Command-line">2.2 Command line</h2>
<ul>
<li>通过命令行可以执行代码块并进行简单的时间性能测量(<code>benchmark</code>)，基本的测量方法为<strong>循环执行取均值</strong>。先看一个简单例子：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pyperf timeit <span class="string">&#x27;[1,2]*1000&#x27;</span></span></span><br><span class="line">.....................</span><br><span class="line">Mean +- std dev: 4.19 us +- 0.05 us</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>--output</code>或<code>-o</code>输出结果到 JSON 文件中：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pyperf timeit <span class="string">&#x27;[1,2]*1000&#x27;</span> -o bench.json</span></span><br><span class="line">.....................</span><br><span class="line">Mean +- std dev: 4.22 us +- 0.08 us</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>stats指令</code>计算多次执行的统计数据(<strong>均值/最大/最小值</strong>等)：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pyperf stats outliers.json -q</span></span><br><span class="line">Total duration: 11.6 sec</span><br><span class="line">Start date: 2017-03-16 16:30:01</span><br><span class="line">End date: 2017-03-16 16:30:16</span><br><span class="line">Raw value minimum: 135 ms</span><br><span class="line">Raw value maximum: 197 ms</span><br><span class="line"></span><br><span class="line">Number of calibration run: 1</span><br><span class="line">Number of run with values: 20</span><br><span class="line">Total number of run: 21</span><br><span class="line"></span><br><span class="line">Number of warmup per run: 1</span><br><span class="line">Number of value per run: 3</span><br><span class="line">Loop iterations per value: 2^15</span><br><span class="line">Total number of values: 60</span><br><span class="line"></span><br><span class="line">Minimum:         4.12 us</span><br><span class="line">Median +- MAD:   4.25 us +- 0.05 us</span><br><span class="line">Mean +- std dev: 4.34 us +- 0.31 us</span><br><span class="line">Maximum:         6.02 us</span><br><span class="line"></span><br><span class="line">  0th percentile: 4.12 us (-5% of the mean) -- minimum</span><br><span class="line">  5th percentile: 4.15 us (-4% of the mean)</span><br><span class="line"> 25th percentile: 4.21 us (-3% of the mean) -- Q1</span><br><span class="line"> 50th percentile: 4.25 us (-2% of the mean) -- median</span><br><span class="line"> 75th percentile: 4.30 us (-1% of the mean) -- Q3</span><br><span class="line"> 95th percentile: 4.84 us (+12% of the mean)</span><br><span class="line">100th percentile: 6.02 us (+39% of the mean) -- maximum</span><br><span class="line"></span><br><span class="line">Number of outlier (out of 4.07 us..4.44 us): 9</span><br></pre></td></tr></table></figure>
<ul>
<li>使用直方图(<code>hist指令</code>)显示上述结果：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pyperf hist outliers.json -q</span></span><br><span class="line">4.10 us: 15 ##############################</span><br><span class="line">4.20 us: 29 ##########################################################</span><br><span class="line">4.30 us:  6 ############</span><br><span class="line">4.40 us:  3 ######</span><br><span class="line">4.50 us:  2 ####</span><br><span class="line">4.60 us:  1 ##</span><br><span class="line">4.70 us:  0 |</span><br><span class="line">4.80 us:  1 ##</span><br><span class="line">4.90 us:  0 |</span><br><span class="line">5.00 us:  0 |</span><br><span class="line">5.10 us:  0 |</span><br><span class="line">5.20 us:  2 ####</span><br><span class="line">5.30 us:  0 |</span><br><span class="line">5.40 us:  0 |</span><br><span class="line">5.50 us:  0 |</span><br><span class="line">5.60 us:  0 |</span><br><span class="line">5.70 us:  0 |</span><br><span class="line">5.80 us:  0 |</span><br><span class="line">5.90 us:  0 |</span><br><span class="line">6.00 us:  1 ##</span><br></pre></td></tr></table></figure>
<ul>
<li>对于一些测试可能<strong>无法获得稳定的结果</strong>，此时可以尝试使用中位数<code>median absolute deviation (MAD)  </code>去进行数据统计。</li>
</ul>
<p>更多高级统计方法可见：<a href="https://pyperf.readthedocs.io/en/latest/analyze.html">https://pyperf.readthedocs.io/en/latest/analyze.html</a></p>
<h2 id="2-3-Python-API">2.3 Python API</h2>
<h3 id="2-3-1-bench-func">2.3.1 bench_func()</h3>
<p><code>bench_func()</code>用于对<strong>函数</strong>进行性能测试，主要包括如下参数：</p>
<ul>
<li><em>name:</em> 本次<code>benchmark</code>的名称，在脚本中应保持唯一；</li>
<li><em>func:</em> 回调函数；</li>
<li><em>inner_loop:</em> 用于标准化每次循环迭代的时间。</li>
</ul>
<p><code>bench_func()</code>方法在设计时<strong>具有不可忽略的执行开销</strong>，如果<code>func</code>本身时间较短(&lt;1ms)则不建议使用该方法，此时使用<code>timeit() </code>和 <code>bench_time_func()</code>更加合适。下面给出一个用例，使用<code>bench_func()</code> 测量1ms的睡眠经过的时间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> pyperf</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">runner = pyperf.Runner()</span><br><span class="line">runner.bench_func(<span class="string">&#x27;sleep&#x27;</span>, func)</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-timeit">2.3.2 timeit()</h3>
<p><code>timeit()</code>同样用于性能测试，主要包括以下参数：</p>
<ul>
<li><em>name:</em> 本次<code>benchmark</code>的名称，在脚本中应保持唯一；</li>
<li><em>stmt:</em> 执行的python语句；</li>
<li><em>setup:</em> 在每次进行性能统计循环前执行的Python语句；</li>
<li><em>teardown:</em> 在每次进行性能统计循环后执行的Python语句；</li>
<li><em>duplicate</em>:  <em>stmt</em>中语句的重复次数，减少外循环的性能成本。</li>
</ul>
<p>下面给出一个例子，使用<code>timeit()</code> 测量1000个数字的排序列表时间性能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> pyperf</span><br><span class="line"></span><br><span class="line">runner = pyperf.Runner()</span><br><span class="line">runner.timeit(<span class="string">&quot;sorted(list(range(1000)), key=lambda x: x)&quot;</span>,</span><br><span class="line">              stmt=<span class="string">&quot;sorted(s, key=f)&quot;</span>,</span><br><span class="line">              setup=<span class="string">&quot;f = lambda x: x; s = list(range(1000))&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-bench-command">2.3.3 bench_command()</h3>
<p>使用<code>time.perf_counter()</code>计时器对命令的执行时间进行基准测试，测量<em><strong>Wall-time</strong></em>而不是<em><strong>CPU-time</strong></em>。</p>
<p>两者的区别为：</p>
<ul>
<li><em>Wall-time:</em> 计算开始到计算结束的时间；</li>
<li><em>CPU-time:</em> CPU用来执行程序的时间；</li>
</ul>
<p>部分程序由于需要线程等待<strong>IO完成</strong>或<strong>用户输入</strong>，导致CPU无法100%被利用，所以通常<em>CPU-time</em>比<em>wall-time</em>小。多线程时程序的<em>CPU-time</em> 是各个线程的<em>CPU-time</em> 时间统计之和。</p>
<p>关键参数如下：</p>
<ul>
<li><em>name:</em> 本次<code>benchmark</code>的名称，在脚本中应保持唯一；</li>
<li><em>command:</em> 命令参数列表，第一个参数通常是程序，这里我们一般就使用<code>sys.executable</code>。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pyperf</span><br><span class="line"></span><br><span class="line">runner = pyperf.Runner()</span><br><span class="line">runner.bench_command(<span class="string">&#x27;python_startup&#x27;</span>, [sys.executable, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-bench-time-func">2.3.4 bench_time_func()</h3>
<p><code>bench_time_func()</code>与其他方法的差异是<strong>要求我们自己编写测量函数</strong>，返回所有循环经过的总时间。</p>
<ul>
<li><em>name:</em> 本次l<code>benchmark</code>的名称，在脚本中应保持唯一；</li>
<li><em>time_func(loops, *args):</em> 时间统计函数，需要我们基于<code>loops</code>参数内循环测量时间并返回。</li>
</ul>
<p>下面给出一个例子，测量<code>dict[key]</code>的查询性能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> pyperf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bench_dict</span>(<span class="params">loops, mydict</span>):</span></span><br><span class="line">    range_it = <span class="built_in">range</span>(loops)</span><br><span class="line">    t0 = pyperf.perf_counter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> loops <span class="keyword">in</span> range_it:</span><br><span class="line">        mydict[<span class="string">&#x27;0&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;100&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;200&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;300&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;400&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;500&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;600&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;700&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;800&#x27;</span>]</span><br><span class="line">        mydict[<span class="string">&#x27;900&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pyperf.perf_counter() - t0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">runner = pyperf.Runner()</span><br><span class="line">mydict = &#123;<span class="built_in">str</span>(k): k <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)&#125;</span><br><span class="line"><span class="comment"># inner-loops: dict[str] is duplicated 10 times</span></span><br><span class="line">runner.bench_time_func(<span class="string">&#x27;dict[str]&#x27;</span>, bench_dict, mydict, inner_loops=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h1>三、参考文献</h1>
<p><a href="https://pyperf.readthedocs.io/en/latest/api.html">pyperf API参考手册</a></p>
<p><a href="https://pyperf.readthedocs.io/en/latest/user_guide.html">pyperf 用户手册</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>python三方件</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyperf</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
</search>
