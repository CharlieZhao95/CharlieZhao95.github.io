<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python GIL与多进程编程</title>
    <url>/2021/12/26/Python%20GIL%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、Python-GIL概述"><a href="#一、Python-GIL概述" class="headerlink" title="一、Python GIL概述"></a>一、Python GIL概述</h1><p>​        本文假定您有一定的Python基础，在Python中很重要的一个概念就是GIL(全局解释器锁)，<strong>一个阻碍机器码并行执行的全局锁</strong>，这也代表了Python中的多线程实质上都是<strong>伪多线程</strong>，同一时刻实际只有一个线程在执行，即便使用多线程也无法做到真正的并发。</p>
<p>​        由于GIL的存在，在多核系统中执行CPU密集型任务时也无法利用多核优势，使用多线程的性能甚至会比单线程更差一些。针对这个问题在此给出业内通用的做法<strong>多进程编程</strong>，同时介绍Python中<strong>协程</strong>的使用。</p>
<h1 id="二、多进程编程"><a href="#二、多进程编程" class="headerlink" title="二、多进程编程"></a>二、多进程编程</h1><h2 id="2-1-multiprocessing"><a href="#2-1-multiprocessing" class="headerlink" title="2.1 multiprocessing"></a>2.1 multiprocessing</h2><p>​        multiprocessing 是官方提供的多进程管理包，通过使用子进程而非线程有效地绕过了全局解释器锁。 因此，multiprocessing 模块允许程序员充分利用给定机器上的多个处理器。</p>
<p>​        先看一组多线程与多进程执行独立任务时的性能对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @Time    : 2021/12/26 22:43 </span></span><br><span class="line"><span class="comment"># @Author  : CharlieZhao</span></span><br><span class="line"><span class="comment"># @File    : test_multiprocessing.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Note    : This module is used to test performance of multiprocessing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print_number</span>(<span class="params">info</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100_000_000</span>):</span><br><span class="line">        res = res + i</span><br><span class="line">    <span class="built_in">print</span>(info + <span class="string">&quot; task over, result = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_execution_time</span>(<span class="params">start_time, end_time</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The execution time is &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_multiprocessing_task</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    log the execution time of multiprocessing task.</span></span><br><span class="line"><span class="string">    :return: void</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; multiprocessing task start &quot;</span>)</span><br><span class="line">    p1 = Process(target=_print_number, args=(<span class="string">&quot;Process 1&quot;</span>,))</span><br><span class="line">    p2 = Process(target=_print_number, args=(<span class="string">&quot;Process 2&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    show_execution_time(start, end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; multiprocessing task end &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_threading_task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; threading task start &quot;</span>)</span><br><span class="line">    t1 = Thread(target=_print_number, args=(<span class="string">&quot;Thread 1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=_print_number, args=(<span class="string">&quot;Thread 2&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    show_execution_time(start, end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; threading task start &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMultiprocessing</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To avoid performance deficiency caused by GIL, multiprocessing is a better way to perform concurrent tasks</span></span><br><span class="line"><span class="string">    than threading.This module is used to test performance of multiprocessing.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    execute_multiprocessing_task()</span><br><span class="line">    execute_threading_task()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">result:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> multiprocessing task start </span></span><br><span class="line"><span class="string">Process 2 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">Process 1 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">The execution time is 10.988635778427124 s</span></span><br><span class="line"><span class="string"> multiprocessing task end </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> threading task start </span></span><br><span class="line"><span class="string">Thread 1 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">Thread 2 task over, result = 4999999950000000</span></span><br><span class="line"><span class="string">The execution time is 19.204389572143555 s</span></span><br><span class="line"><span class="string"> threading task start </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">可以很直观的看到在执行两个独立任务时，使用多进程相较于使用多线程效率快了一倍以上。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>GIL</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
